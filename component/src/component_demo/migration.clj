(ns component-demo.migration
  "Database Migration."
  (:require [clojure.java.jdbc :as jdbc]
            [java-jdbc.ddl :as ddl]
            [java-jdbc.sql :as sql]
            [com.stuartsierra.component :as c]))


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper

(def drop-statement
  "DROP TABLE IF EXISTS students")

(def create-statement
  (ddl/create-table :students
                    [:id "BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY"]
                    [:name "varchar(255) NOT NULL UNIQUE"]
                    [:age "integer NOT NULL"]))

(defn down!
  [pool]
  (jdbc/with-db-transaction [c pool]
    (jdbc/execute! c [drop-statement])))

(defn seed!
  [pool]
  (let [data [{:name "John" :age 42}
              {:name "Jane" :age 99}]]

    (jdbc/with-db-transaction [c pool]
      (apply jdbc/insert! c :students data))))

(defn up!
  [pool]
  (jdbc/with-db-transaction [c pool]
    (jdbc/db-do-commands c
                         drop-statement
                         create-statement)))


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Record

(defrecord DatabaseMigration [pool]
  c/Lifecycle

  (start [component]
    (if-not pool
      component
      (do (println ";; [DatabaseMigration] Creating Tables")
          (up! pool)
          (seed! pool)
          component)))

  (stop [component]
    (if-not pool
      component
      (do (println ";; [DatabaseMigration] Dropping Tables")
          (down! pool)
          (assoc component :pool nil)))))


(defn new-migration
  []
  (map->DatabaseMigration {}))




(comment

  (jdbc/with-db-transaction [c (:pool user/system)]
    (jdbc/insert! c :students
                  {:name "John" :age 42}
                  {:name "Jane" :age 99}))

  (jdbc/with-db-transaction [c (:pool user/system)]
    (jdbc/query c (sql/select * :students)))

  )
