(ns schema
  "Schema declaration and database initialization (drop + create)."
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.java.jdbc.ddl :as ddl]
            [clojure.java.jdbc.sql :as sql]))


(defn id-column
  []
  [:id "integer generated by default as identity primary key"])

(defn fk-column
  ([table owned?]
     (fk-column table (keyword (str (name table) "_id")) owned?))
  ([table column owned?]
     [column (str "integer"
                  (if owned? " not null")
                  " references " (name table) " (id)"
                  (if owned? " on delete cascade on update cascade"))]))

(defn attribute [ident & [docstring]]
  {:db.install/_attribute :db.part/db
   :db/id (d/tempid :db.part/db)
   :db/ident ident
   :db/doc docstring})

(defn type-string
  [a]
  (assoc a :db/valueType :db.type/string))

(defn type-ref
  [a]
  (assoc a :db/valueType :db.type/ref))

(defn component
  [a]
  (assoc a :db/isComponent true))

(defn cardinality-one [a]
  (assoc a :db/cardinality :db.cardinality/one))

(defn cardinality-many [a]
  (assoc a :db/cardinality :db.cardinality/many))

(def schema [(-> (attribute :project/name) type-string cardinality-one)
             (-> (attribute :project/release) type-ref cardinality-many component)
             (-> (attribute :project/member) type-ref cardinality-many component)
             (-> (attribute :release/name) type-string cardinality-one)
             (-> (attribute :release/task) type-ref cardinality-many component)
             (-> (attribute :release/member) type-ref cardinality-many)
             (-> (attribute :task/summary) type-string cardinality-one)
             (-> (attribute :member/name) type-string cardinality-one)
             (-> (attribute :member/watched-task) type-ref cardinality-many component)])

(defn- missing?
  [db-spec table column name]
  (empty? (jdbc/query db-spec (sql/select * table (sql/where {column name})))))


(defn create!
  [db-spec]
  (doseq [t (map (fn [[k v]] (cons k v)) schema)]
    (jdbc/execute! db-spec [(apply ddl/create-table t)]))
  (jdbc/execute! db-spec ["create sequence pkseq"]))


(defn drop!
  [db-spec]
  (doseq [t (keys schema)]
    (jdbc/execute! db-spec [(ddl/drop-table t)]))
  (jdbc/execute! db-spec ["drop sequence pkseq"]))
